odoo.define('vtt.malware_activity_manager', function(require){
    "use strict";

    var core = require('web.core');
    var registry = require('web.widget_registry');

    var field_registry = require('web.field_registry');
    var AbstractField = require('web.AbstractField');

    var session = require('web.session');
    var rpc = require('web.rpc');
    var ajax = require('web.ajax');

    var Widget = require('web.Widget');
    var QWeb = core.qweb;

    var _t = core._t;

    var MalwareActivityManager = Widget.extend({
        template: "MalwareActivity",
        cssLibs: [
//            '/web/static/lib/nvd3/nv.d3.css'
        ],
        jsLibs: [
        ],
        custom_events: {
//            v_reload_attachment_box: '_onReloadAttachmentBox',
//            v_delete_attachment: '_onDeleteAttachment',
//            v_checked_permission: '_onCheckedPermission'
        },
        events: {
//            'click .available_task': 'task_available',
        },
        init: function(){
            this._super.apply(this, arguments);

            this.context = arguments[1];
            this.malware_res_id = this.context.res_id > 0 ? this.context.res_id : -1;
//            console.log(this.malware_res_id);

            this.data = {};
        },

        willStart: function() {
            var self = this;

            //trong ajax co function loadLibs se truy cap vao field jsLibs cua doi tuong truyen vao (tham so)
            return $.when(ajax.loadLibs(this), this._super()).then(function() {
                self.fetchActivitiesData();
                return self.fetchAvailableActivity();
            });
        },

        start: function(){
            var super_render = this._super;
            var self = this;

            return this._super().then(function() {
                self.render();
            });
        },

        render: function() {
            var self = this;

            this.$manager_button = $(this.$el.find('.activity_manager'));
            this.$content_box = $(this.$el.find('.content-box'));
            this._renderSelectedTable();

            this.$edit_modal = $(QWeb.render('MalwareActivity.QuickEditPopup', {}));
            this.$edit_modal_title = this.$edit_modal.find('.modal-title');
            this.$edit_modal_body = this.$edit_modal.find('.modal-body');
            this.$list_box = $(this.$edit_modal_body.find('.col-sm.list'));
            this.$available_box = $(this.$edit_modal_body.find('.col-sm.selected-box'));
            this.$detail_box = $(this.$edit_modal_body.find('.col-sm.detail'));
            this.$popup_save_button = $(this.$edit_modal.find('.btn-save'));

            //event
            this.$edit_modal.off('click', '.btn-save').on('click', '.btn-save', this._on_ok.bind(this));
            this.$manager_button.off('click').on('click', this._on_manager_button_click.bind(this));

            this.$edit_modal.appendTo($('body'));
        },

        _on_manager_button_click: function(ev){
            var self = this;

            this.edit = false;
            this.data.detail_id = 0;
            this.data.selected_id = 0;

            this.$popup_save_button.attr('disabled', 'disabled');

//            this._render_popup_selectedActivitiesTable();
            if(!this.data.all_activity || this.data.all_activity.length <= 0){
                var def = this._fetchActivitiesData();
                $.when(def).then(function(){
                    this._render_popup_listActivityTable();
                    this.$edit_modal.modal('show');
                });
            }else {
                this._render_popup_listActivityTable();
                this.$edit_modal.modal('show');
            }
        },

        _render_popup_selectedActivitiesTable: function(){
            var self = this;

            this.$available_box.html(QWeb.render('MalwareActivity.SelectedActivityTable', { records: self.data.selected_activities }));
            this.$available_box.off('click', '.mwa_remove_button').on('click', '.mwa_remove_button', this._remove_activity.bind(this));
        },

        _render_popup_listActivityTable: function(){
            var self = this;

//            var selected_ids = self.data.selected_activities.map(e => e.activity_id[0]);
            self.data.available_activities = self.data.all_activity;
//            self.data.available_activities = _.filter(self.data.all_activity, function(e){ return !selected_ids.includes(e.id);});
            this.$list_box.html(QWeb.render('MalwareActivity.Table', { records: self.data.available_activities }));
            //this.$list_box.off('click', '.mwa_add_button').on('click', '.mwa_add_button', this._add_update_activity.bind(this));
            this.$list_box.off('click', '.data-row').on('click', '.data-row', this._select_row.bind(this));

            if(this.edit && this.data.quick_edit && this.data.quick_edit.id > 0 && this.data.quick_edit.activity_id[0] > 0){
                this.$list_box.find('.data-row').removeClass('selected');
                this.$list_box.find('[res_id=' + this.data.quick_edit.activity_id[0] + ']').addClass('selected');
            }
        },

        _select_row: function(ev){
            var self = this;
            var row = $(ev.currentTarget);

            this.data.selected_id = row.attr('res_id');
            if(this.data.selected_id > 0)
                this.$popup_save_button.removeAttr('disabled');
            var activity = _.find(self.data.all_activity, function(item){ return item.id == self.data.selected_id; });
            if(!this.edit){
                this.data.quick_edit = {
                    'name': activity.name,
                    'description': activity.description
                };
            }
            this.$detail_box.find('.description').val(activity.description);

            this.$list_box.find('.data-row').removeClass('selected');
            row.addClass('selected');

            this._load_description_box();
        },

        _load_description_box: function(){
            var self = this;

            if(this.data.selected_id > 0){
                var item = _.find(this.data.all_activity, function(e){ return e.id == self.data.selected_id; });
                var input = this.$detail_box.find('.description');
                if(input.length > 0)
                    input.val(!item.description ? '' : item.description);
            }
        },

        _create_params: function(mode, id, data){
//            var rid = mode == 0 || id < 0? 'virtual_777' : id;
            var result = [[this.malware_res_id], {
                'malware_activity_detail': [[mode, id, data]]
            }];
            return result;
        },

        _remove_activity: function(ev){
            ev.stopPropagation();
            ev.preventDefault();
            var self = this;

            var t = $(ev.currentTarget);
            var id = t.data('res_id');

            var params = this._create_params(3, id, {});

            var def = this._rpc({
                model: 'threat.malware',
                method: 'write',
                args: params
            }).then(function(){
               var def1 = self.fetchAvailableActivity();
               $.when(def1).then(function(){
//                    self._render_popup_selectedActivitiesTable();
                    self._render_popup_listActivityTable();
               });
            });
        },

        _add_update_activity: function(id, data){
            var self = this;

            var params = this._create_params(id > 0? 1 : 0, id > 0? id : 'virtual_777', data);

            var def = this._rpc({
                model: 'threat.malware',
                method: 'write',
                args: params
//                args: [[self.malware_res_id], {
//                    'malware_activity_detail': [
//                        [1, 11, {
//
//                            'activity_id': 3,
//                            'name': 'Ac ac ac 111 222',
//                            'description': 'Blooooooooooo 22'
//                        }]
//                    ]
//                }]
            });
            return def;
        },

        _on_ok: function(ev){
            var self = this;
            var $input = this.$edit_modal_body.find('.description');
//
            if(this.data.selected_id <= 0)
                return;

            var data = {
                'malware_id': self.malware_res_id,
                'activity_id': self.data.selected_id,
                'name': self.data.quick_edit.name,
                'description': $input.val()
            };
            if(this.data.selected_id > 0){
                var item = _.find(this.data.all_activity, function(e){ return e.id == self.data.selected_id; });
                data.activity_id = item.id;
                data.name = item.name;
            }
            var def = this._add_update_activity(this.data.detail_id, data);
            $.when(def).then(function(){
               var def1 = self.fetchAvailableActivity();
               $.when(def1).then(function(){
//                    self._render_popup_selectedActivitiesTable();
                    self._render_popup_listActivityTable();
               });
            });

            this.$edit_modal.modal('hide');
        },

        //
        _getFieldsFromString: function(s){
            var result = [];
            s = s.replace(' ', '');
            result = s.split(',');
            return result;
        },

        fetchMalwareData: function(){
            var self = this;

            var def1 =  this._rpc({
                model: 'threat.malware',
                method: 'search_read',
                args: [[1]],
                kwargs: {
                    domain: [
                        //'&', ['c_model', '=', this.model], ['c_id', '=', this.res_id]
                    ],
                    fields: ['name', 'malware_activity_detail'],
                    //limit: 5,
                    //order: [{name: 'id', asc: false}],
                },
            });

            return $.when(def1).done(function(result){

            });
        },

        _renderSelectedTable: function(){
            var self = this;
            if(this.$content_box)
                this.$content_box.html('');
            this.$availableTable = $(QWeb.render('MalwareActivity.SelectedActivityTable', { records: self.data.selected_activities }));
            this.$availableTable.off('click', '.data-row').on('click', '.data-row', this._on_available_row_click.bind(this));
            this.$availableTable.off('click', '.mwa_remove_button').on('click', '.mwa_remove_button', this._remove_activity.bind(this));
            this.$availableTable.appendTo(this.$content_box);
        },

        _on_available_row_click: function(ev){
            var self = this;
            var t = $(ev.currentTarget);

            var res_id = t.attr('res_id');

            this.$popup_save_button.removeAttr('disabled');

            this.data.quick_edit = _.find(self.data.selected_activities, function(item){ return item.id == res_id });
            this.edit = true;
            this.data.detail_id = res_id;
            if(this.data.quick_edit && this.data.quick_edit.id > 0)
                this.data.selected_id = this.data.quick_edit.activity_id[0];

//            this._render_popup_selectedActivitiesTable();
            this._render_popup_listActivityTable();
            if(this.data.quick_edit && this.data.quick_edit.id > 0)
                this.$detail_box.find('.description').val(this.data.quick_edit.description);
            this.$edit_modal.modal('show');
        },

        fetchAvailableActivity: function(){
            var self = this;

            var def1 =  this._rpc({
                model: 'threat.malware.activity.detail',
                method: 'search_read',
                kwargs: {
                    domain: [
                        ['malware_id', '=', self.malware_res_id]
                    ],
                    fields: ['activity_id', 'name', 'description'],
                },
            }).then(function(result){
                self.data.selected_activities = result;
                self._renderSelectedTable();
            });

            return $.when(def1).done(function(){

            });
        },

        //load data
        fetchActivitiesData: function(){
//            this._rpc({
//                model: 'sale.order',
//                method: 'write',
//                args: [[7], {'order_line': [[4, 14, false], [4, 15, false], [4, 16, false], [4, 17, false], [4, 45, false], [4, 46, false], [4, 47, false],
//[0, 'virtual_901', {'sequence': 13, 'display_type': false, 'product_id': 19, 'product_template_id': 13, 'name': '[E-COM09] Large Desk 333', 'analytic_tag_ids': [[6, false, []]], 'product_uom_qty': 1, 'qty_delivered': 0, 'qty_delivered_manual': 0, 'product_uom': 1, 'customer_lead': 0, 'price_unit': 1799, 'tax_id': [[6, false, []]], 'discount': 0}]]}],
////                args: [[7], {
////                    order_line: [
////                        [4, 14, false],
////                        [4, 15, false],
////                        [4, 16, false],
////                        [1, 17, {
////                            name: 'Win cabalero'
////                        }]
////                    ]
////                }],
//            });

            var self = this;

            var def1 =  this._rpc({
                model: 'threat.malware.activity',
                method: 'search_read',
                kwargs: {
                    domain: [
                        //'&', ['c_model', '=', this.model], ['c_id', '=', this.res_id]
                    ],
                    fields: ['name', 'description'],
                },
            }).then(function(result){
                self.data.all_activity = result;
            });

            return $.when(def1).done(function(){

            });
        },
    });

    registry.add('malware_activity_manager', MalwareActivityManager);

    return {MalwareActivityManager:MalwareActivityManager,};
});