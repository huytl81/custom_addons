# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from . import analysis_tools


class ThreatMalwareSubject(models.Model):
    _name = 'threat.malware.subject'
    _description = 'Malware Subject'
    _inherit = ['threat.sync.mixin']

    # Reference to a Malware
    malware_id = fields.Many2one('threat.malware', 'Malware', ondelete='cascade')

    # Reference to a Subject
    parent_id = fields.Many2one('threat.malware.subject', 'Parent Subject')
    child_ids = fields.One2many('threat.malware.subject', 'parent_id', 'Child Subjects')

    # Overview
    md5 = fields.Char('MD5')
    sha1 = fields.Char('SHA1')
    sha256 = fields.Char('SHA256')
    command_line = fields.Char('Command Line')

    # Libraries
    load_library = fields.Text('Loaded Libraries')
    # Console I/O
    console_write = fields.Text('Console Writes')
    # Device I/O
    devices = fields.Text('Devices')
    # File System Activity
    file_write = fields.Text('Files Written')
    file_read = fields.Text('Files Read')
    file_delete = fields.Text('Files Deleted')
    # Registry Activity
    reg_value_modify = fields.Text('Registry Values Modified')
    reg_value_read = fields.Text('Registry Values Read')
    reg_value_delete = fields.Text('Registry Values Deleted')
    reg_value_monitor = fields.Text('Registry Values Monitored')
    # Process Interactions
    process_operation = fields.Text('Process Operations')
    service_create = fields.Text('Services Created')
    service_start = fields.Text('Services Started')
    service_stop = fields.Text('Services Stopped')
    service_change = fields.Text('Services Changed')
    # Mutex Activity
    mutex_create = fields.Text('Mutexes Created')
    mutex_open = fields.Text('Mutexes Opened')
    # Exceptions
    exception_raise = fields.Text('Exceptions Raised')
    # Network Activity
    name_resolution = fields.Text('Name Resolutions')
    download_file = fields.Text('Downloaded Files')
    http_traffic = fields.Text('HTTP Traffic')
    ftp_traffic = fields.Text('FTP Traffic')
    irc_traffic = fields.Text('IRC Traffic')
    smtp_traffic = fields.Text('SMTP Traffic')
    tcp_udp_traffic = fields.Text('Other TCP/UDP Traffic')
    # Signatures
    yara_signature = fields.Text('Yara Signatures')

    # Frequent API Calls
    frequent_api_calls = fields.Text('Frequent API Calls')

    ss_code = fields.Char('Secret Sequence', copy=False)

    # Update lastline report fields summary when edit
    def write(self, vals):
        res = super(ThreatMalwareSubject, self).write(vals)
        if self.malware_id:
            lastline_mapper = self.env['threat.subject.field.mapper'].search([('code', '=', 'LL')], limit=1)
            lastline_rules = lastline_mapper.mapped('line_ids')
            rule_fields = [r.res_field for r in lastline_rules]
            if any(f in vals for f in rule_fields):
                changes = [f for f in rule_fields if f in vals]
                malware = self.malware_id
                malware._update_subjects_summary(changes)
        return res

    @api.model_create_multi
    def create(self, vals_list):
        records = super(ThreatMalwareSubject, self).create(vals_list)
        lastline_mapper = self.env['threat.subject.field.mapper'].search([('code', '=', 'LL')], limit=1)
        lastline_rules = lastline_mapper.mapped('line_ids')
        rule_fields = [r.res_field for r in lastline_rules]
        for r in records:
            if r.malware_id:
                r.malware_id._update_subjects_summary(rule_fields)
        return records
