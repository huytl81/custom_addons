# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
import magic
import base64
import json
from virustotal3 import core as VirusTotal3Core
import hashlib
from datetime import datetime


class InvestigateMalware(models.Model):
    _name = 'investigate.malware'
    _inherits = {'threat.malware': 'malware_id'}
    _description = 'Investigate Malware'
    _inherit = ['threat.sync.mixin']

    malware_id = fields.Many2one('threat.malware', required=True, auto_join=True, string='Related Malware')
    investigate_id = fields.Many2one('investigate.investigate', 'Investigate')

    location_id = fields.Many2one('investigate.location', 'Location', related='investigate_id.location_id')

    state = fields.Selection([
        ('doubt', 'Doubt'),
        ('confirm', 'Confirmed')
    ], 'State', default='doubt')

    investigate_activity_ids = fields.One2many('threat.malware.activity.detail', 'investigate_malware_id',
                                               string='Activities')

    dt_infection = fields.Datetime('Infection Time')

    ss_code = fields.Char('Secret Sequence', copy=False)

    def to_confirm(self):
        for im in self:
            ads = im.mapped('investigate_activity_ids')
            if ads:
                for ad in ads:
                    ad.write({
                        'investigate_ids': [(4, im.investigate_id.id)]
                    })
            im.write({
                'state': 'confirm',
            })

    def to_doubt(self):
        for im in self:
            ads = im.mapped('investigate_activity_ids')
            if ads:
                for ad in ads:
                    ad.write({
                        'investigate_ids': [(3, im.investigate_id.id)]
                    })
            im.write({
                'state': 'doubt',
            })

    @api.onchange('malware_sample_attachment')
    def onchange_sample_attachment(self):
        if self.malware_sample_attachment:
            # mime = mimetypes.guess_mimetype(self.malware_sample_attachment)
            # Change mimetype method to python mimetypes
            # mime = mimetypes.guess_type(self.sample_attachment_filename)[0]
            # Change mimetype method to python-magic
            mime = magic.from_buffer(base64.decodebytes(self.malware_sample_attachment), mime=True)
            self.mime_type = mime

            # File size
            size = len(self.malware_sample_attachment) * 3 / 4
            self.filesize = size

            # May change MD5, SHA1, SHA256 loaded from lastline report
            self.sha1 = hashlib.sha1(self.malware_sample_attachment).hexdigest()
            self.md5 = hashlib.md5(self.malware_sample_attachment).hexdigest()
            self.sha256 = hashlib.sha256(self.malware_sample_attachment).hexdigest()

            # Virustotal Report
            API_KEY = self.env['ir.config_parameter'].sudo().get_param('vtt_dhag_threat_analysis.virustotal_api_key',
                                                                       False)
            if API_KEY:
                # Virustotal-API
                # vt = VirusTotalPublicAPI(API_KEY)
                # response = vt.get_file_report(self.md5)
                # if response.get('results') and response['response_code'] == 200 and response['results']['response_code'] > 0:
                #     self.virustotal_report = json.dumps(response['results'], indent=2)
                #     self.virustotal_report_positive = f'{str(response["results"]["positives"])}/{str(response["results"]["total"])}'
                # Virustotal 3
                vt = VirusTotal3Core.Files(API_KEY)
                try:
                    response = vt.info_file(self.md5)
                    report_data = response['data'].get('attributes')
                    self.virustotal_report = json.dumps(report_data, indent=2)
                    self.virustotal_report_positive = f'{str(report_data["last_analysis_stats"]["malicious"])}/{str(report_data["last_analysis_stats"]["malicious"] + report_data["last_analysis_stats"]["undetected"])}'
                    if report_data.get('signature_info'):
                        if report_data['signature_info'].get('signers'):
                            self.signature_info = report_data['signature_info']['signers']
                        if report_data['signature_info'].get('signing date'):
                            self.build_time = datetime.strptime(report_data['signature_info'].get('signing date'),
                                                                '%H:%M %p %m/%d/%Y')
                except Exception:
                    self.virustotal_report_positive = ''