# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
# from odoo.tools import mimetypes
import mimetypes
import json
import hashlib
import os
from . import analysis_tools
import magic
import base64
# from virus_total_apis import PublicApi as VirusTotalPublicAPI
from virustotal3 import core as VirusTotal3Core
from datetime import datetime


class ThreatMalware(models.Model):
    _name = 'threat.malware'
    _description = 'Malware Information'
    _inherit = ['mail.thread', 'mail.activity.mixin', 'threat.sync.mixin']

    name = fields.Char('Name', compute='_compute_malware_name', store=True)

    # Overview
    md5 = fields.Char('MD5')
    sha1 = fields.Char('SHA1')
    sha256 = fields.Char('SHA256')
    mime_type = fields.Char('MIME Type')

    hash_duplicate = fields.Boolean('Hash Duplicated?', compute='_compute_hash_duplicate')
    same_hash_id = fields.Integer('Same Hash ID')

    @api.depends('sha1', 'sha256', 'md5')
    def _compute_hash_duplicate(self):
        for m in self:
            domain = [
                '|', ('sha1', '=', m.sha1),
                '|', ('sha256', '=', m.sha256),
                ('md5', '=', m.md5)
            ]
            check = False
            if m.id:
                domain = ['&', ('id', '!=', m.id)] + domain
            regs = self.env['threat.malware'].search(domain)
            if regs:
                check = True
                m.same_hash_id = regs[0].id
            else:
                m.same_hash_id = False
            m.hash_duplicate = check

    short_summary = fields.Char('Short Summary', compute='_compute_short_summary')
    # Threat level
    score_float = fields.Float('Lastline Score')

    dt_submission = fields.Datetime('Submission Time', default=fields.Datetime.now)

    # Malicious Activity Summary
    malicious_activity = fields.Text('Malicious Activities')

    # Child Tasks
    child_tasks = fields.Text('Child Tasks')

    # Reference to Subjects
    subject_ids = fields.One2many('threat.malware.subject', 'malware_id', 'Subjects')

    # Reference to Investigate
    campaign_ids = fields.Many2many('investigate.campaign', string='Campaigns', compute='_compute_campaign_location', store=True)
    location_ids = fields.Many2many('investigate.location', string='Locations', compute='_compute_campaign_location', store=True)
    investigate_ids = fields.Many2many('investigate.investigate', string='Investigates', compute='_compute_campaign_location', store=True)

    @api.depends('investigate_malware_ids', 'investigate_malware_ids.state')
    def _compute_campaign_location(self):
        for m in self:
            investigates = m.mapped('investigate_malware_ids').filtered(lambda x: x.state == 'confirm').investigate_id
            m.investigate_ids = investigates
            m.campaign_ids = investigates.campaign_id
            m.location_ids = investigates.location_id

    investigate_malware_ids = fields.One2many('investigate.malware', 'malware_id', 'Instant')

    # Subjects Summary
    # Command lines
    command_line = fields.Text('Command Lines', compute='_compute_display_filename', store=True)
    # Libraries
    load_library = fields.Text('Loaded Libraries')
    # Console I/O
    console_write = fields.Text('Console Writes')
    # Device I/O
    devices = fields.Text('Devices')
    # File System Activity
    file_write = fields.Text('Files Written')
    file_read = fields.Text('Files Read')
    file_delete = fields.Text('Files Deleted')
    # Registry Activity
    reg_value_modify = fields.Text('Registry Values Modified')
    reg_value_read = fields.Text('Registry Values Read')
    reg_value_delete = fields.Text('Registry Values Deleted')
    reg_value_monitor = fields.Text('Registry Values Monitored')
    # Process Interactions
    process_operation = fields.Text('Process Operations')
    service_create = fields.Text('Services Created')
    service_start = fields.Text('Services Started')
    service_stop = fields.Text('Services Stopped')
    service_change = fields.Text('Services Changed')
    # Mutex Activity
    mutex_create = fields.Text('Mutexes Created')
    mutex_open = fields.Text('Mutexes Opened')
    # Exceptions
    exception_raise = fields.Text('Exceptions Raised')
    # Network Activity
    name_resolution = fields.Text('Name Resolutions')
    download_file = fields.Text('Downloaded Files')
    http_traffic = fields.Text('HTTP Traffic')
    ftp_traffic = fields.Text('FTP Traffic')
    irc_traffic = fields.Text('IRC Traffic')
    smtp_traffic = fields.Text('SMTP Traffic')
    tcp_udp_traffic = fields.Text('Other TCP/UDP Traffic')
    # Signatures
    yara_signature = fields.Text('Yara Signatures')

    # Frequent API Calls
    frequent_api_calls = fields.Text('Frequent API Calls')

    # Customize fields
    # malware_type = fields.Char('Malware Type')
    malware_type_id = fields.Many2one('threat.malware.type', 'Malware Type')
    rel_parts = fields.Text('Related Parts')
    txt_start_key = fields.Text('Start Key')
    # dt_infection = fields.Datetime('Infection Time')
    data_stolen = fields.Text('Stolen Data')
    dt_keylog = fields.Datetime('Keylog Time')
    malware_technique = fields.Char('Malware Technique')
    filesize = fields.Integer('File Size')

    data_stolen_time = fields.Char('Data Stolen Time')
    dt_timestamp = fields.Datetime('Timestamp')
    submit_count = fields.Integer('Submission Count', default=1)

    # Virustotal result
    virustotal_report = fields.Text('Virustotal Report')
    build_time = fields.Datetime('Build Time')
    signature_info = fields.Text('Signature Verification')
    virustotal_report_positive = fields.Char('Virustotal Report Positives')

    # Technical fields
    malware_sample_attachment = fields.Binary('Sample Attachment')
    sample_attachment_filename = fields.Char('Filename')
    malware_filename = fields.Char('Filename', compute='_compute_display_filename', store=True)

    ss_code = fields.Char('Secret Sequence', copy=False)

    # Malware activity detail
    malware_activity_detail = fields.One2many('threat.malware.activity.detail', 'malware_id', string='Activity detail')

    # Comparison
    compare_ids = fields.One2many('threat.comparison', 'malware_id', 'Comparison')
    compare_count = fields.Integer('# Compare Reports', compute='_compute_compare_count')

    def _compute_compare_count(self):
        for m in self:
            m.compare_count = len(m.compare_ids)

    def _compute_short_summary(self):
        for m in self:
            m.short_summary = f'{m.md5} was found to be malicious (score {int(m.score_float)}/100) at {m.dt_submission}'

    # Update subjects fields summary
    def _update_subjects_summary(self, changes):
        self.ensure_one()
        if changes:
            subjects_datas = self.mapped('subject_ids').read(fields=changes)
            vals = {}
            for f in changes:
                lst = []
                for subject in subjects_datas:
                    if subject.get(f):
                        # need catch value except if input data does not in json format
                        try:
                            json_object = json.loads(subject[f])
                        except Exception:
                            # Append user input. Maybe raise UserError ?
                            json_object = subject.get(f)
                        if type(json_object) == list:
                            lst += json_object
                        else:
                            lst.append(json_object)
                if lst:
                    vals[f] = json.dumps(lst)
            if vals:
                self.write(vals)

    @api.depends('subject_ids.command_line', 'sample_attachment_filename')
    def _compute_display_filename(self):
        for m in self:
            subjects_datas = m.mapped('subject_ids')
            command_lines = [s.command_line for s in subjects_datas if s.command_line]
            if m.sample_attachment_filename:
                m.malware_filename = m.sample_attachment_filename
                command_lines.append(m.sample_attachment_filename)
            elif command_lines:
                filepath = command_lines[0]
                m.malware_filename = os.path.basename(filepath)
            m.command_line = command_lines

    @api.depends('malware_filename')
    def _compute_malware_name(self):
        for m in self:
            name = f'{m.malware_filename or ""}'
            m.name = name

    @api.model
    def new_copy_from_ids(self, ids=[]):
        if ids:
            malwares = self.env['threat.malware'].browse(ids)
            val_list = []
            for m in malwares:
                new_copy = m.copy_data()[0]
                new_copy.update({
                    'malware_filename': m.malware_filename,
                    'command_line': m.command_line,
                    'investigate_id': False,
                    'state': 'doubt',
                })
                val_list.append(new_copy)
            new_malwares = self.env['threat.malware'].create(val_list)

            return new_malwares.ids
        else:
            return []

    @api.onchange('malware_sample_attachment')
    def onchange_sample_attachment(self):
        if self.malware_sample_attachment:
            # mime = mimetypes.guess_mimetype(self.malware_sample_attachment)
            # Change mimetype method to python mimetypes
            # mime = mimetypes.guess_type(self.sample_attachment_filename)[0]
            # Change mimetype method to python-magic
            mime = magic.from_buffer(base64.decodebytes(self.malware_sample_attachment), mime=True)
            self.mime_type = mime

            # File size
            size = len(self.malware_sample_attachment) * 3 / 4
            self.filesize = size

            # May change MD5, SHA1, SHA256 loaded from lastline report
            self.sha1 = hashlib.sha1(self.malware_sample_attachment).hexdigest()
            self.md5 = hashlib.md5(self.malware_sample_attachment).hexdigest()
            self.sha256 = hashlib.sha256(self.malware_sample_attachment).hexdigest()

            # Virustotal Report
            API_KEY = self.env['ir.config_parameter'].sudo().get_param('vtt_dhag_threat_analysis.virustotal_api_key', False)
            if API_KEY:
                # Virustotal-API
                # vt = VirusTotalPublicAPI(API_KEY)
                # response = vt.get_file_report(self.md5)
                # if response.get('results') and response['response_code'] == 200 and response['results']['response_code'] > 0:
                #     self.virustotal_report = json.dumps(response['results'], indent=2)
                #     self.virustotal_report_positive = f'{str(response["results"]["positives"])}/{str(response["results"]["total"])}'
                # Virustotal 3
                vt = VirusTotal3Core.Files(API_KEY)
                try:
                    response = vt.info_file(self.md5)
                    report_data = response['data'].get('attributes')
                    self.virustotal_report = json.dumps(report_data, indent=2)
                    self.virustotal_report_positive = f'{str(report_data["last_analysis_stats"]["malicious"])}/{str(report_data["last_analysis_stats"]["malicious"] + report_data["last_analysis_stats"]["undetected"])}'
                    if report_data.get('signature_info'):
                        if report_data['signature_info'].get('signers'):
                            self.signature_info = report_data['signature_info']['signers']
                        if report_data['signature_info'].get('signing date'):
                            self.build_time = datetime.strptime(report_data['signature_info'].get('signing date'), '%H:%M %p %m/%d/%Y')
                except Exception:
                    self.virustotal_report_positive = ''

    def get_hash_redir_wz(self):
        return {
            'type': 'ir.actions.act_window',
            'name': _('Same Hash Already Exist'),
            'res_model': 'malware.hash.check.redirect.wizard',
            'target': 'new',
            'view_mode': 'form',
            'context': {'same_hash_id': self.same_hash_id, 'new_copy_id': self.id},
            # 'context': {'same_hash_id': 6},
            # 'views': [[False, 'form']],
        }

    def view_comparison(self):
        return {
            'type': 'ir.actions.act_window',
            'name': _('Comparison Report'),
            'view_mode': 'tree,form',
            'domain': [('type', '=', 'threat.malware'), ('malware_id', '=', self.id)],
            'context': {'default_malware_id': self.id, 'default_type': 'threat.malware', 'list_type': 'malware'},
            'res_model': 'threat.comparison',
            'target': 'current',
        }
