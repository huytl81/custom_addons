# -*- coding: utf-8 -*-

from odoo import models, fields, api, tools


class ThreatMalwareReportInvestigate(models.Model):
    _name = 'threat.malware.report.investigate'
    _description = 'Malware Report by Investigate'
    _auto = False

    name = fields.Char('Name', readonly=True)
    # malware_id = fields.Many2one('threat.malware', 'Malware', readonly=True)

    # Overview
    md5 = fields.Char('MD5', readonly=True)
    sha1 = fields.Char('SHA1', readonly=True)
    sha256 = fields.Char('SHA256', readonly=True)
    mime_type = fields.Char('MIME Type', readonly=True)

    score_float = fields.Float('Lastline Score', readonly=True)
    dt_submission = fields.Datetime('Submission Time', readonly=True)

    nbr_lines = fields.Integer('# of Records', readonly=True)

    # Investigate Info
    investigate_id = fields.Many2one('investigate.investigate', 'Investigate', readonly=True)
    campaign_id = fields.Many2one('investigate.campaign', 'Campaign', readonly=True)
    location_id = fields.Many2one('investigate.location', 'Location', readonly=True)

    # Investigate Details Info
    device_name = fields.Char('Device Name', readonly=True)
    department = fields.Char('Department', readonly=True)
    investigate_date = fields.Date(' Investigate Date', readonly=True)
    connect_type = fields.Selection([
        ('internet', 'Internet'),
        ('LAN', 'LAN'),
        ('none', 'None')
    ], 'Connection Type', default='internet', readonly=True)
    device_type = fields.Selection([
        ('A', 'A'),
        ('B', 'B'),
        ('C', 'C')
    ], 'Device Type', default='A', readonly=True)
    user_id = fields.Many2one('res.users', 'Investigator', readonly=True)

    # Location Details Info
    location_name = fields.Char('Location', readonly=True)
    district = fields.Char('City/ District', readonly=True)
    country_id = fields.Many2one('res.country', string='Country', readonly=True)
    # country_code = fields.Char(related='country_id.code', readonly=True)
    state_id = fields.Many2one('res.country.state', string='State', readonly=True)
    # phone = fields.Char('Phone', readonly=True)
    # email = fields.Char('Email', readonly=True)

    # Campaign Details Info
    campaign_name = fields.Char('Campaign', readonly=True)
    campaign_date_from = fields.Date('Campaign From', readonly=True)
    campaign_date_to = fields.Date('Campaign To', readonly=True)

    # Other Info
    malware_type_id = fields.Many2one('threat.malware.type', 'Malware Type', readonly=True)
    malware_technique = fields.Char('Malware Technique', readonly=True)
    filesize = fields.Integer('File Size', readonly=True)

    # From file Info
    malware_filename = fields.Char('Filename', readonly=True)

    # Virustotal Info
    build_time = fields.Datetime('Build Time', readonly=True)
    signature_info = fields.Text('Signature Verification', readonly=True)
    virustotal_report_positive = fields.Char('Virustotal Report Positives', readonly=True)
    dt_infection = fields.Datetime('Infection Time')

    def init(self):
        # self._table = sale_report
        tools.drop_view_if_exists(self.env.cr, self._table)
        self.env.cr.execute("""CREATE or REPLACE VIEW %s as (
            %s
            FROM ( %s )
            %s
            )""" % (self._table, self._select(), self._from(), self._group_by()))

    def _select(self):
        select_str = """
            SELECT
                ii.id as investigate_id,
                ii.device_name,
                ii.department,
                ii.date as investigate_date,
                ii.device_type,
                ii.connect_type,
                ii.user_id,
                loc.id as location_id,
                loc.name as location_name,
                loc.district,
                loc.country_id,
                loc.state_id,
                campaign.id as campaign_id,
                campaign.name as campaign_name,
                campaign.date_from as campaign_date_from,
                campaign.date_to as campaign_date_to,
                min(tm.id) as id,
                tm.malware_type_id,
                tm.md5,
                tm.sha1,
                tm.sha256,
                tm.mime_type,
                tm.score_float,
                tm.dt_submission,
                tm.name as name,
                tm.malware_technique,
                tm.filesize,
                tm.malware_filename,
                tm.build_time,
                tm.signature_info,
                tm.virustotal_report_positive,
                itm.dt_infection,
                count(*) as nbr_lines
        """
        return select_str

    def _from(self):
        from_str = """
            threat_malware tm
               left join investigate_malware itm on (itm.malware_id=tm.id)
               left join investigate_investigate ii on (itm.investigate_id=ii.id)
                left join investigate_location loc on (loc.id=ii.location_id)
                LEFT join investigate_campaign campaign on (campaign.id=ii.campaign_id)
        """
        return from_str

    def _group_by(self):
        group_by_str = """
            GROUP BY
                ii.id,
                ii.device_name,
                ii.department,
                ii.date,
                ii.device_type,
                ii.connect_type,
                ii.user_id,
                loc.id,
                loc.name,
                loc.district,
                loc.country_id,
                loc.state_id,
                campaign.id,
                campaign.name,
                campaign.date_from,
                campaign.date_to,
                tm.md5,
                tm.sha1,
                tm.sha256,
                tm.mime_type,
                tm.score_float,
                tm.dt_submission,
                tm.name,
                tm.malware_type_id,
                tm.malware_technique,
                tm.filesize,
                tm.malware_filename,
                tm.build_time,
                tm.signature_info,
                tm.virustotal_report_positive,
                itm.dt_infection
        """
        return group_by_str